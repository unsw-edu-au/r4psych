# Import

## Reading in Excel spreadsheets

This is

### Reading in .csv

## Reading in SPSS 

## Reading in Qualtrics data

### Reading in .sav

# Read in the data

Remember the file setup described above? This is where that starts to be important. Remember, our working directory (i.e., where R thinks "here" is) was set via the Rproj file -- so it is the "Williams Lab Core R" folder. You can check this by typing `getwd()` or `here()` in the console. 

For most of this core script, we'll be using data from a file called sampledata.sav, which should be in the data subfolder from the zipped file. If not, sort that out now!

A .sav file is in SPSS format. When you export from Qualtrics into .sav/SPSS format, it retains helpful information like question wording and response labels. If you export straight to .csv, you lose that info and will find yourself cross-checking back to Qualtrics. So, strong word of advice to always export to .sav.

The code below uses the `here` command to direct R to the data folder *from the working directory*, and then the .sav file within it.

The `glimpse` command gives a nice overview of the variables, their type, and a preview of the data.

```{r eval = FALSE}

data <- read_sav(here("data", "sampledata.sav")) 

glimpse(data)

```


These variable names won't be very nice to work with with awkward and inconsistent capitalisation. Actual Qualtrics exports are even messier!

The `clean_names` function from `janitor` helps clean them up!

`data_cleanednames <-` at the start of the line saves the change to a new dataframe. Alternately, you could write it back to the same dataframe (e.g., `data <-` ), but this should be done very intentionally as it makes it harder to backtrack to the source of an error. The general rule is to create a new dataframe each time you implement a big change on the data.

The `glimpse` command here shows you that you effectively cleaned the variable names!

```{r eval = FALSE}

data_cleanednames <- clean_names(data)

glimpse(data_cleanednames)

```

A few things about working with files in SPSS format (.sav) before we continue. The reason why we bother with this is that the SPSS format maximises the information in the file. Unlike exporting to .csv or another spreadsheet format, .sav retains information about question wording (saved as a variable label) and response labelling (saved as a value label).

If you look at the variable types at the right of the `glimpse` output, you'll see the some of the variables are dbl (numeric) while some are dbl+lbl (numeric with labelled values). If you view the `data` object (by clicking on it in the Environment or using `view(data)`) you will see that some of the variables have the question wording below the variable name.

Having this information on hand is really helpful when working with your data!

The `view_df` function from the `sjPlot` package creates a really nicely formatted html file that includes variable names, question wording, response options, and response labelling. This code saves the html file to the `output_files` folder using the `here` package (which starts where your Rproj file is). This html file is nice as a reference for your own use or to share with a supervisor or collaborator!

```{r eval = FALSE}

view_df(data_cleanednames)

view_df(data_cleanednames, file=here("output_files","spsstest_codebook.html"))

```

The `data_dict` function from `surveytoolbox` makes a dataframe with all the variable and response labels - similar to the html created above, but this can be called upon later in R as it's now part of the environment. 

```{r eval = FALSE}
datadictionary <- data_cleanednames %>%
  data_dict()
```

Let's say you just want to know the question wording or response labels for a particular variable, you can do this via code rather than checking the whole dataset. The `extract_vallab` command from `surveytoolbox` returns the value labels for a given variable.

```{r eval = FALSE}
data_cleanednames %>%
  extract_vallab("demographicscateg")
```

There are (evidently) times when packages *do not like* labelled data. So, here are a few tools for removing labels from the `haven` package. Keep these up your sleeve for problem solving later! `zap_labels` and `zap_label` not surprisingly removes the labels - the first removes the value labels and the second removes the variable labels! The code below makes a new data dictionary of the zapped dataframe and glimpses the new dataframe to confirm the labels are gone.

```{r eval = FALSE}

data_zapped <- data_cleanednames %>%
  zap_labels() %>%
  zap_label()

datadictionary_zapped <- data_zapped %>%
  data_dict()

glimpse(data_zapped)
```

For the rest of this script, we will work with the *zapped* dataframe. This is the recommended approach to save headaches with errors down the line.