[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Psychology",
    "section": "",
    "text": "Welcome!\nThis book is written in mind for someone working in Psychology and is venturing into R with little to no experience. Research data in Psychology is unique in that it is collected in formats that are human-readable but not exactly R-readable. Data wrangling conventions will often vary depending on research question and therefore by what type data is collected. In ‚ÄúR for Psychology‚Äù, we have compiled a series of real-world examples from different sub-disciplines and will walk through the process of wrangling, summary, analyses and visualisations\nThis book is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\n\n\n\nHow to contribute\nThis book is built using Quarto and hosted via GitHub Pages. It is a living resource, we welcome any contributions from the Psychology community that would improve the quality of this book. There are many ways to contribute:\n\nFixing grammar and typos\nClarification or expanding on existing content\nContribute real-world data in worked examples\nAuthoring an entire chapter\n\nTake a look at our Contributing Guide to see how you can help!\n\n\nAcknowledgements\nThis book was created on the unceded territory of the Bedegal people who are the Traditional custodians of the lands where the Kensington campus is located.\nThe first version of this book was funded by the UNSW Research Infrastructure Scheme.\nWe would like to thank the following people who have contributed to the book:\n@daxkellie",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1¬† Introduction",
    "section": "",
    "text": "1.1 What you will learn\nHow to:\nPre-analysis stages:\nAnalysis stages:",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-you-will-learn",
    "href": "intro.html#what-you-will-learn",
    "title": "1¬† Introduction",
    "section": "",
    "text": "Read your hard-earned data into R\nWrangle and clean the data in a R-friendly format\nProduce summary statistics\nAnalyse your data\nVisualise your findings",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#how-book-is-organised",
    "href": "intro.html#how-book-is-organised",
    "title": "1¬† Introduction",
    "section": "1.2 How book is organised",
    "text": "1.2 How book is organised\nThis book is organised by data type (e.g.¬†Survey data, Questionnaire data).\nEach chapter will walk through the process will work with real-world Psychology data and will walk you through reading in data, to cleaning and eventually analysis and visualising the results.\n\n1.2.1 Conventions\nWe will refer to packages as {dplyr} and functions as mean(). Variables and objects (such as file names or data objects) as age and mtcars. Where it would aid understanding, we will sometimes refer to functions within a particular packages as dplyr::mutute()",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#prerequisites",
    "href": "intro.html#prerequisites",
    "title": "1¬† Introduction",
    "section": "1.3 Prerequisites",
    "text": "1.3 Prerequisites\nContent drawn from existing resources such as https://r4ds.hadley.nz/intro#prerequisites\n\n1.3.1 R\nDownload Point to intro to R content (RUWithme, Environmental Computing, Software Carpentry)\n\n\n1.3.2 RStudio\nRStudio projects Point to resource about Rproj (SWC)\nRunning R code https://r4ds.hadley.nz/intro#running-r-code\n\n\n1.3.3 Version control with git\n\n1.3.3.1 What is git?\n\n\n1.3.3.2 Why do I need git?\n\n\n\n\n1.3.4 R packages\nEvery code section will always begin with calls to R packages. There will be code that is commented out (have # preceding the code) for you to install these if you don‚Äôt have them on your computer\n\n# install.packages(dplyr)\n\nlibrary(dplyr)\n\nThere are few R packages that will be on heavy rotation when it comes to working with Psychology data. #### {tidyverse}\n{tidyverse} is a collection of R packages that is essential to a data scientist‚Äôs toolkit. By installing {tidyverse} you are actually installing 8 other packages. The ones we will most often use include:\n\n{dplyr}\n{ggplot2}\n{tidyr}\n\nThe handy thing is, when you load the {tidyverse} library into R, it will load the core suite of packages for you instead of you loading each of them independently! Efficiency!! üöÄ\n\nlibrary(tidyverse)\n\nOther packages that will be helpful for your R workflows include:\n\n{here}\n\n{janitor}\n\nAt the end of each chapter, we will also include our call to sessionInfo() so you can see what version of packages we are using.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#virtual-environments",
    "href": "intro.html#virtual-environments",
    "title": "1¬† Introduction",
    "section": "1.4 Virtual environments",
    "text": "1.4 Virtual environments\nSpeaking on what package versions as we write this book, we understand the R package space is constantly changing. This means sometimes code will break due to package updates and this is all part of the process! To combat this problem, we‚Äôve enlisted renv to create a reproducible environment for building this book.\n\n1.4.1 Download our virtual environment\nThe virtual environment used to build this book is stored in a lockfile. You can find this file in the GitHub repository where the source code of this book lives.\nThe lockfile is named renv.lock. You can download this file directly but clicking on the file name and clicking on the ‚ÄúDownload raw file‚Äù button.\n\nAlternatively, you can clone our repository into your computer. Learn more about cloning repositorsies and other GitHub workflows in Happy Git by Jenny Bryan.\nOnce you have this file downloaded, move it in a relevant project directory and then we can let {renv} work its magic.\n\n\n1.4.2 Install\nFirst things first, lets install renv if we don‚Äôt have it already.\n\ninstall.packages(\"renv\")\n\nlibrary(renv)\n\n\n\n1.4.3 Recreate virtual enviroment\nNow let‚Äôs tell renv where our downloaded renv.lock file is. Specific the path to the file in the function restore() and you are good to go!\n\nrestore(lockfile = \"path_to_renv.lock\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "organise.html",
    "href": "organise.html",
    "title": "2¬† Organise",
    "section": "",
    "text": "2.1 R projects\nR really cares about where things live on your computer, even if you don‚Äôt. Humans have gotten out of the habit of thinking very hard about where they put things on their machine; the search capabilities on the modern computer are quite good and you can generally find files quite easily by searching for them.\nWhen you are coding in R, however, you need to explicitly tell R where to find things. You can make this process much easier for yourself by always working within an RStudio Project.\nWhen you work within an RStudio project, you can reference everything in relation to the top level of that project folder. It doesn‚Äôt matter where that project folder lives on your machine (i.e.¬†Desktop, Documents, OneDrive, Dropbox) the code you write is always relative to your project folder. This means that you can share that whole project folder with someone else (your collaborators or supervisor), and your code won‚Äôt break.\nAlways open RStudio by double clicking on the .RProj file in the folder on your machine. There is an icon in the top right corner of RStudio that shows you which project you are working in and makes it easy to switch between projects.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Organise</span>"
    ]
  },
  {
    "objectID": "organise.html#r-projects",
    "href": "organise.html#r-projects",
    "title": "2¬† Organise",
    "section": "",
    "text": "When you start a new analysis project, create a New RStudio Project via the File tab.\n\n\n\n\nWorking in an RStudio Project called my_new_analysis",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Organise</span>"
    ]
  },
  {
    "objectID": "organise.html#where-is-here",
    "href": "organise.html#where-is-here",
    "title": "2¬† Organise",
    "section": "2.2 where is here?",
    "text": "2.2 where is here?\nOnce you have set up a project to contain your analysis, you can avoid further file path drama by using the here() package. This package makes it super easy to refer to file paths and ensures that your code will work, even if someone else is trying to run it on a different computer.\nOnce you have installed the here() package, use it to tell R where you find your data like this. This code chunk loads there here() and readr() packages and then tells R to read in a csv file, located in the ‚Äúdata‚Äù folder, and the file is called file.csv\n\nmydata &lt;- read_csv(here(\"data\", \"file.csv\"))\n\nBy referring to the location of your data using the here() package, here is no need worry about working directories, and you can be sure that your code will work on any machine.\n\nTo read more about why projects and the here() package are useful, check out this blog by Jenny Bryan",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Organise</span>"
    ]
  },
  {
    "objectID": "organise.html#folder-structure",
    "href": "organise.html#folder-structure",
    "title": "2¬† Organise",
    "section": "2.3 folder structure",
    "text": "2.3 folder structure\nOnce you have your project set up, you might like to think about imposing some structure on it. It is mostly personal preference, but many analysis projects include the following folders.\n\ndata\n\nraw-data\nclean-data\n\noutput\n\nfigures\ntables\n\nmanuscript\n\nYou always want to keep your raw data untouched and separate from any data that you write back to your machine after your data cleaning process, so a raw-data subfolder can be useful.\nIn addition, you might want to organise your figures and tables into an output folder and put any writing that you are doing in the manuscripts folder.\n\nIf you want to write a manuscript (or maybe your whole thesis!) using RMarkdown, check out the papaja (Preparing APA Journal Articles) package\n\nUsually the scripts (or R Markdown) documents that you write your code in, live in the top level of your project file. In RStudio, your project structure might look something like this.\n\n\n\nA project structure template",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Organise</span>"
    ]
  },
  {
    "objectID": "organise.html#naming-things",
    "href": "organise.html#naming-things",
    "title": "2¬† Organise",
    "section": "2.4 naming things",
    "text": "2.4 naming things\nWhen naming things in your analysis folder, it is a good idea to think about your future self. In all likelihood, when you come back to this analysis in a few months time, you will have no recollection how it actually worked, but you can leave yourself some breadcrumbs by being a bit intentional about naming things.\nYour file names should be meaningful and orderly. The name of each file should tell the new user (or future you) what is in the file and where it goes in the process.\n\ncleaning-functions.R\n1_wrangle.Rmd\n2_visualise.Rmd\n3_analyse.Rmd\n\nIn this project, I can tell by glancing at the file names that I have a script (.R) that contains functions and three R Markdown files that contain each stage of the analysis.\nSticking with lower case is a good idea; avoid special characters and use - or _ to fill any gaps.\nFind more useful naming tips in the Tidyverse Style guide.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Organise</span>"
    ]
  },
  {
    "objectID": "organise.html#documenting-things",
    "href": "organise.html#documenting-things",
    "title": "2¬† Organise",
    "section": "2.5 documenting things",
    "text": "2.5 documenting things\n\n2.5.1 README\nIn addition to the breadcrumbs that our file names leave, it is also a good idea to leave explicit notes to your future self (or someone else) in a README.md file. This is a simple text file that contains instructions for how the user should engage with your project.\nCreate a new Markdown file and save it as README.md\nUse it to leave yourself instructions that look a bit like this.\n\n\n\nAn example README file\n\n\n\n\n2.5.2 R Markdown\nIn addition to leaving your future self explicit notes about how to engage with the project generally in a README document, it is also best practice to document your code in a way that makes it really clear what the code is doing and why. For this reason, we recommend using R Markdown documents (rather than R scripts) for your analysis.\nR Markdown is a handy file format that allows you to intersperse chunks of code with notes. This kind of document makes it easy to write explanations, interpretations, and thoughts for your future self as you code. This kind of documentation makes it much more likely to be able to make sense of what you have done and why, when you come back to your analysis in a few months time.\nR Markdown documents can also be ‚Äúknitted‚Äù into html, pdf, or word documents, allowing you to share your analysis (and associated thoughts) with collaborators, even if they don‚Äôt know R.\nTo get up to speed on R Markdown and how to use it, check out RLadiesSydney #RYouWithMe MarkyMark module",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Organise</span>"
    ]
  },
  {
    "objectID": "import.html",
    "href": "import.html",
    "title": "3¬† Import",
    "section": "",
    "text": "4 Packages for this chapter\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(here)\nlibrary(janitor)\nlibrary(haven)\nlibrary(sjPlot)\nlibrary(surveytoolbox) \n\n# note surveytoolbox installs from github\n# remotes::install_github(\"martinctc/surveytoolbox\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Import</span>"
    ]
  },
  {
    "objectID": "import.html#reading-in-.csv-files",
    "href": "import.html#reading-in-.csv-files",
    "title": "3¬† Import",
    "section": "5.1 Reading in .csv files",
    "text": "5.1 Reading in .csv files\nExporting data in its simplest form (comma separated values) means that your data is readable by most software, trackable by version control systems, and lightweight.\nUse the following code to read in a csv file. Remember that we use the here() function to tell R where to find the data file, relative to the top level of the project file.\n\ndata1 &lt;- read_csv(here(\"data\", \"my_csv_data.csv\"))\n\nRows: 5 Columns: 3\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (1): gender\ndbl (2): age, score\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nNOTE: the message above prints in red in RStudio, but its not an error. Just a message telling you that this dataset has 5 rows and 3 columns. It also has information about the type of data that R thinks each variable is. Here R thinks the gender variable is character (strings/text) and the age and score variables are double (R speak for numeric).",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Import</span>"
    ]
  },
  {
    "objectID": "import.html#reading-in-excel-spreadsheets",
    "href": "import.html#reading-in-excel-spreadsheets",
    "title": "3¬† Import",
    "section": "5.2 Reading in Excel spreadsheets",
    "text": "5.2 Reading in Excel spreadsheets\nSometimes your data is in .xlsx format. You can use the readxl package to read spreadsheets into R. You can get a sense for the first few rows of your dataframe using the head() function.\n\ndata2 &lt;- read_xlsx(here(\"data\", \"my_excel_data.xlsx\"))\n\nhead(data2)\n\n# A tibble: 5 √ó 3\n    age gender score\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1    23 F         65\n2    34 F         78\n3    22 M         67\n4    19 F         44\n5    23 M         77",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Import</span>"
    ]
  },
  {
    "objectID": "import.html#reading-in-qualtrics-data",
    "href": "import.html#reading-in-qualtrics-data",
    "title": "3¬† Import",
    "section": "5.3 Reading in Qualtrics data",
    "text": "5.3 Reading in Qualtrics data\nIf you are collecting survey data, you are probably using Qualtrics. You can export your Qualtrics data in lots of different formats, but we advocate for exporting it as a .sav file.\nYes this is typically the format used in SPSS. When you export from Qualtrics into .sav/SPSS format, it retains helpful information like question wording and response labels. If you export straight to .csv, you lose that info and will find yourself cross-checking back to Qualtrics. So, strong word of advice to always export to .sav. it is handy because it keeps extra information about your variables in a set of labels, that you can use down the track.\nFrom here, we‚Äôll be using data from a file called sampledata.sav, which you can find in the data folder. We are using read_sav() from the haven package.\nThe glimpse function gives a nice overview of the variables, their type, and a preview of the data.\n\ndata &lt;- read_sav(here(\"data\", \"sampledata.sav\")) \n\nglimpse(data)\n\nRows: 199\nColumns: 13\n$ participantid         &lt;dbl&gt; 103, 109, 118, 121, 122, 126, 128, 129, 132, 133‚Ä¶\n$ IPAddress             &lt;chr&gt; \"73.173.1\", \"97.102.1\", \"108.30.2\", \"75.128.9\", ‚Ä¶\n$ Variable1             &lt;dbl+lbl&gt; 4, 1, 3, 2, 6, 3, 2, 1, 2, 2, 1, 7, 2, 1, 1,‚Ä¶\n$ Variable2             &lt;dbl+lbl&gt; 4, 4, 6, 5, 2, 6, 2, 4, 4, 3, 5, 2, 6, 5, 5,‚Ä¶\n$ Variable3             &lt;dbl+lbl&gt; 6, 4, 6, 5, 3, 6, 3, 4, 4, 3, 5, 2, 6, 5, 5,‚Ä¶\n$ Variable4             &lt;dbl&gt; 5, 4, 2, 2, 5, 6, 5, 1, 3, 3, 4, 5, 6, 5, 6, 3, ‚Ä¶\n$ Variable5             &lt;dbl&gt; 5, 5, 3, 1, 6, 7, 6, 1, 4, 2, 5, 7, 6, 7, 4, 3, ‚Ä¶\n$ Variable6             &lt;dbl&gt; 6, 6, 2, 1, 5, 6, 7, 3, 3, 4, 5, 6, 5, 6, 7, 2, ‚Ä¶\n$ Demographicscateg     &lt;dbl+lbl&gt; 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1,‚Ä¶\n$ condition12           &lt;dbl+lbl&gt; 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1,‚Ä¶\n$ condition1234         &lt;dbl+lbl&gt; 3, 3, 1, 2, 4, 1, 1, 3, 3, 3, 1, 1, 1, 1, 4,‚Ä¶\n$ comments              &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", ‚Ä¶\n$ CompletionTimeseconds &lt;dbl&gt; 527, 287, 391, 377, 359, 595, 296, 466, 296, 550‚Ä¶\n\n\nThese variable names won‚Äôt be very nice to work with with awkward and inconsistent capitalisation. Actual Qualtrics exports are even messier!\nThe clean_names function from janitor helps clean them up!\nHere we take our data dataframe, and pipe %&gt;% it into clean_names, and then assign (&lt;-) to a new object called data_cleanednames\nAlternately, you could write it back to the same dataframe (e.g., data &lt;- ), but this should be done very intentionally as when you overwrite dataframes, it can be difficult to debug your code when you get errors.\nThe general rule is to create a new dataframe each time you implement a big change on the data.\nThe glimpse command here shows you that you effectively cleaned the variable names!\n\ndata_cleanednames &lt;- data %&gt;%\n  clean_names()\n\nglimpse(data_cleanednames)\n\nRows: 199\nColumns: 13\n$ participantid          &lt;dbl&gt; 103, 109, 118, 121, 122, 126, 128, 129, 132, 13‚Ä¶\n$ ip_address             &lt;chr&gt; \"73.173.1\", \"97.102.1\", \"108.30.2\", \"75.128.9\",‚Ä¶\n$ variable1              &lt;dbl+lbl&gt; 4, 1, 3, 2, 6, 3, 2, 1, 2, 2, 1, 7, 2, 1, 1‚Ä¶\n$ variable2              &lt;dbl+lbl&gt; 4, 4, 6, 5, 2, 6, 2, 4, 4, 3, 5, 2, 6, 5, 5‚Ä¶\n$ variable3              &lt;dbl+lbl&gt; 6, 4, 6, 5, 3, 6, 3, 4, 4, 3, 5, 2, 6, 5, 5‚Ä¶\n$ variable4              &lt;dbl&gt; 5, 4, 2, 2, 5, 6, 5, 1, 3, 3, 4, 5, 6, 5, 6, 3,‚Ä¶\n$ variable5              &lt;dbl&gt; 5, 5, 3, 1, 6, 7, 6, 1, 4, 2, 5, 7, 6, 7, 4, 3,‚Ä¶\n$ variable6              &lt;dbl&gt; 6, 6, 2, 1, 5, 6, 7, 3, 3, 4, 5, 6, 5, 6, 7, 2,‚Ä¶\n$ demographicscateg      &lt;dbl+lbl&gt; 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1‚Ä¶\n$ condition12            &lt;dbl+lbl&gt; 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1‚Ä¶\n$ condition1234          &lt;dbl+lbl&gt; 3, 3, 1, 2, 4, 1, 1, 3, 3, 3, 1, 1, 1, 1, 4‚Ä¶\n$ comments               &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",‚Ä¶\n$ completion_timeseconds &lt;dbl&gt; 527, 287, 391, 377, 359, 595, 296, 466, 296, 55‚Ä¶\n\n\nA few things about working with files in SPSS format (.sav) before we continue. The reason why we bother with this is that the SPSS format maximises the information in the file. Unlike exporting to .csv or another spreadsheet format, .sav retains information about question wording (saved as a variable label) and response labelling (saved as a value label).\nIf you look at the variable types at the right of the glimpse output, you‚Äôll see the some of the variables are dbl (numeric) while some are dbl+lbl (numeric with labelled values). If you view the data object (by clicking on it in the Environment or using view(data)) you will see that some of the variables have the question wording below the variable name.\nHaving this information on hand is really helpful when working with your data!",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Import</span>"
    ]
  },
  {
    "objectID": "import.html#codebooks-data-dictionaries",
    "href": "import.html#codebooks-data-dictionaries",
    "title": "3¬† Import",
    "section": "5.4 Codebooks & Data dictionaries",
    "text": "5.4 Codebooks & Data dictionaries\nWhen you have a really large survey dataset, information about what each variable refers to is essential to a reproducable analysis. Often it is helpful to create a codebook or data dictionary that you can share alongside the datafile, that helps the user understand what the numbers in the file refer to and where they came time.\nThe view_df function from the sjPlot package creates a really nicely formatted html file that includes variable names, question wording, response options, and response labelling. This code saves the html file to the output_files folder using the here package (which starts where your Rproj file is). This html file is nice as a reference for your own use or to share with a supervisor or collaborator!\n\nview_df(data_cleanednames)\n\n\nData frame: data_cleanednames\n\n\n\n\n\n\n\n\n\nID\nName\nLabel\nValues\nValue Labels\n\n\n1\nparticipantid\n\nrange: 103-996\n\n\n2\nip_address\n\n\n&lt;output omitted&gt;\n\n\n3\nvariable1\nvariable 1 question wording\n1\n7\nstrongly disagree\nstrongly agree\n\n\n4\nvariable2\nvariable 2 question wording\n1\n7\nstrongly disagree\nstrongly agree\n\n\n5\nvariable3\nvariable 3 question wording\n1\n7\nstrongly disgree\nstrongly agree\n\n\n6\nvariable4\nvariable 4 question wording\nrange: 1-7\n\n\n7\nvariable5\nvariable 5 question wording\nrange: 1-7\n\n\n8\nvariable6\nvariable 6 question wording\nrange: 1-7\n\n\n9\ndemographicscateg\ndemographics question\n1\n2\ncategory 1\ncategory 2\n\n\n10\ncondition12\ntwo conditions\n1\n2\ncondition 1\ncondition 2\n\n\n11\ncondition1234\nfour conditions\n1\n2\n3\n4\ncondition 1\ncondition 2\ncondition 3\ncondition 4\n\n\n12\ncomments\ncomments\n\n\n\n\n13\ncompletion_timeseconds\ncompletion time (seconds)\nrange: 30-597\n\n\n\n\nview_df(data_cleanednames, file=here(\"output_files\",\"spsstest_codebook.html\"))\n\n\nData frame: data_cleanednames\n\n\n\n\n\n\n\n\n\nID\nName\nLabel\nValues\nValue Labels\n\n\n1\nparticipantid\n\nrange: 103-996\n\n\n2\nip_address\n\n\n&lt;output omitted&gt;\n\n\n3\nvariable1\nvariable 1 question wording\n1\n7\nstrongly disagree\nstrongly agree\n\n\n4\nvariable2\nvariable 2 question wording\n1\n7\nstrongly disagree\nstrongly agree\n\n\n5\nvariable3\nvariable 3 question wording\n1\n7\nstrongly disgree\nstrongly agree\n\n\n6\nvariable4\nvariable 4 question wording\nrange: 1-7\n\n\n7\nvariable5\nvariable 5 question wording\nrange: 1-7\n\n\n8\nvariable6\nvariable 6 question wording\nrange: 1-7\n\n\n9\ndemographicscateg\ndemographics question\n1\n2\ncategory 1\ncategory 2\n\n\n10\ncondition12\ntwo conditions\n1\n2\ncondition 1\ncondition 2\n\n\n11\ncondition1234\nfour conditions\n1\n2\n3\n4\ncondition 1\ncondition 2\ncondition 3\ncondition 4\n\n\n12\ncomments\ncomments\n\n\n\n\n13\ncompletion_timeseconds\ncompletion time (seconds)\nrange: 30-597\n\n\n\n\n\nThe data_dict function from surveytoolbox makes a dataframe with all the variable and response labels - similar to the html created above, but this can be called upon later in R as it‚Äôs now part of the environment.\n\ndatadictionary &lt;- data_cleanednames %&gt;%\n  data_dict()\n\nLet‚Äôs say you just want to know the question wording or response labels for a particular variable, you can do this with code rather than checking the whole dataset. The extract_vallab command from surveytoolbox returns the value labels for a given variable.\nHere we are interested in what the values in the demographicscateg variable refer to.\n\ndata_cleanednames %&gt;%\n  extract_vallab(\"demographicscateg\")\n\n# A tibble: 2 √ó 2\n     id demographicscateg\n  &lt;dbl&gt; &lt;chr&gt;            \n1     1 category 1       \n2     2 category 2       \n\n\nThere are (evidently) times when packages do not like labelled data. So, here are a few tools for removing labels from the haven package. Keep these up your sleeve for problem solving later!\nzap_labels and zap_label each remove labels. Yes it would be nice if those functions were easier to distinguish! The first zaps variable labels, and the second zaps value labels.\nThe code below makes a new data dictionary of the zapped dataframe and glimpses the new dataframe to confirm the labels are gone.\n\ndata_zapped &lt;- data_cleanednames %&gt;%\n  zap_labels() %&gt;%\n  zap_label()\n\ndatadictionary_zapped &lt;- data_zapped %&gt;%\n  data_dict()\n\nglimpse(data_zapped)\n\nRows: 199\nColumns: 13\n$ participantid          &lt;dbl&gt; 103, 109, 118, 121, 122, 126, 128, 129, 132, 13‚Ä¶\n$ ip_address             &lt;chr&gt; \"73.173.1\", \"97.102.1\", \"108.30.2\", \"75.128.9\",‚Ä¶\n$ variable1              &lt;dbl&gt; 4, 1, 3, 2, 6, 3, 2, 1, 2, 2, 1, 7, 2, 1, 1, 3,‚Ä¶\n$ variable2              &lt;dbl&gt; 4, 4, 6, 5, 2, 6, 2, 4, 4, 3, 5, 2, 6, 5, 5, 6,‚Ä¶\n$ variable3              &lt;dbl&gt; 6, 4, 6, 5, 3, 6, 3, 4, 4, 3, 5, 2, 6, 5, 5, 7,‚Ä¶\n$ variable4              &lt;dbl&gt; 5, 4, 2, 2, 5, 6, 5, 1, 3, 3, 4, 5, 6, 5, 6, 3,‚Ä¶\n$ variable5              &lt;dbl&gt; 5, 5, 3, 1, 6, 7, 6, 1, 4, 2, 5, 7, 6, 7, 4, 3,‚Ä¶\n$ variable6              &lt;dbl&gt; 6, 6, 2, 1, 5, 6, 7, 3, 3, 4, 5, 6, 5, 6, 7, 2,‚Ä¶\n$ demographicscateg      &lt;dbl&gt; 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,‚Ä¶\n$ condition12            &lt;dbl&gt; 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1,‚Ä¶\n$ condition1234          &lt;dbl&gt; 3, 3, 1, 2, 4, 1, 1, 3, 3, 3, 1, 1, 1, 1, 4, 2,‚Ä¶\n$ comments               &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",‚Ä¶\n$ completion_timeseconds &lt;dbl&gt; 527, 287, 391, 377, 359, 595, 296, 466, 296, 55‚Ä¶\n\n\nFor the rest of this script, we will work with the zapped dataframe. This is the recommended approach to save headaches with errors down the line.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Import</span>"
    ]
  },
  {
    "objectID": "wrangle.html",
    "href": "wrangle.html",
    "title": "4¬† Wrangle",
    "section": "",
    "text": "4.1 Clean names",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Wrangle</span>"
    ]
  },
  {
    "objectID": "wrangle.html#dealing-with-labels",
    "href": "wrangle.html#dealing-with-labels",
    "title": "4¬† Wrangle",
    "section": "4.2 Dealing with labels",
    "text": "4.2 Dealing with labels",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Wrangle</span>"
    ]
  },
  {
    "objectID": "wrangle.html#exclusions",
    "href": "wrangle.html#exclusions",
    "title": "4¬† Wrangle",
    "section": "4.3 Exclusions",
    "text": "4.3 Exclusions\nmutate case_when\nfilter",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Wrangle</span>"
    ]
  },
  {
    "objectID": "wrangle.html#creating-scales-and-indexes",
    "href": "wrangle.html#creating-scales-and-indexes",
    "title": "4¬† Wrangle",
    "section": "4.4 Creating scales and indexes",
    "text": "4.4 Creating scales and indexes\ngroup_by summarise\nrow_wise mutate\n\n4.4.1 Checking reliabilty",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Wrangle</span>"
    ]
  },
  {
    "objectID": "describe.html",
    "href": "describe.html",
    "title": "5¬† Describe",
    "section": "",
    "text": "5.1 getting a feel for your data\nstr\nglimpse\nskimr",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Describe</span>"
    ]
  },
  {
    "objectID": "describe.html#counting-things",
    "href": "describe.html#counting-things",
    "title": "5¬† Describe",
    "section": "5.2 counting things",
    "text": "5.2 counting things\ngroup_by + summarise + count\nn\ntabyl",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Describe</span>"
    ]
  },
  {
    "objectID": "describe.html#getting-descriptives",
    "href": "describe.html#getting-descriptives",
    "title": "5¬† Describe",
    "section": "5.3 getting descriptives",
    "text": "5.3 getting descriptives\ngroup_by + summarise + mean & sd\n\nscale1_by_condition12 &lt;- data_scalescomputed %&gt;%\n  group_by(condition12) %&gt;%\n  summarise(mean_scale1 = mean(scale1_index, na.rm = TRUE),\n            sd_scale1 = sd(scale1_index, na.rm = TRUE))\n\n\n5.3.1 Three things to remember\n\nWhen we compute means, we need to set the decimals via round().\nWe also need to tell R to calculate the mean, even if some of the contributing data points are missing. This is what na.rm = TRUE does.\nAs noted above, rowwise asks R to do something for each row (which is what we want here ‚Äì to compute the mean of the contributing items for each participant). Whenever we use rowwise (or group_by), we need to ungroup() at the end to avoid issues down the line.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Describe</span>"
    ]
  },
  {
    "objectID": "describe.html#tables",
    "href": "describe.html#tables",
    "title": "5¬† Describe",
    "section": "5.4 tables??",
    "text": "5.4 tables??\ngt\n\ngt(scale1_by_condition12)\n\napaTable",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Describe</span>"
    ]
  },
  {
    "objectID": "plot.html",
    "href": "plot.html",
    "title": "6¬† Plot",
    "section": "",
    "text": "6.1 Plotting raw data\ngeom_point\ngeom_histogram\ngeom_boxplot\ngeom_violin",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Plot</span>"
    ]
  },
  {
    "objectID": "plot.html#plotting-data-summaries",
    "href": "plot.html#plotting-data-summaries",
    "title": "6¬† Plot",
    "section": "6.2 Plotting data summaries",
    "text": "6.2 Plotting data summaries\ngeom_col",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Plot</span>"
    ]
  },
  {
    "objectID": "inferences.html",
    "href": "inferences.html",
    "title": "7¬† Infer",
    "section": "",
    "text": "8 Moving into analyses",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Infer</span>"
    ]
  },
  {
    "objectID": "inferences.html#plots-and-descriptives",
    "href": "inferences.html#plots-and-descriptives",
    "title": "7¬† Infer",
    "section": "8.1 Plots and descriptives",
    "text": "8.1 Plots and descriptives\nNow, let‚Äôs test whether this scale varies by condition (condition 1 vs.¬†condition 2 in condition12).\nBefore jumping into t-tests, let‚Äôs first visualise the data (scale1_index) to get a sense of what it looks like.\nThe first command here tells R to treat condition12 as a categorical variable that groups the data (technically, a factor). This is helpful for plotting. The code uses the dataframe$variablename structure to do a command on just one variable.\nThe second command pipes the data into a command to create a boxplot (geom_boxplot) with the datapoints plotted as well (geom_jitter).The width command makes the plotting of the dots a bit narrower to help with interpretation.\n\ndata_scalescomputed$condition12 &lt;- as.factor(data_scalescomputed$condition12)\n\ndata_scalescomputed %&gt;%\n  ggplot(aes(x = condition12, y = scale1_index, fill = condition12)) +\n  geom_boxplot(alpha = .5) +\n  geom_jitter(alpha = .5, width = 0.2)\n\nBased on the boxplot, we‚Äôd expect a t-test to be nonsignificant - the wide boxes of the plots for each condition overlap, even though the mean of condition 2 is slightly higher than condition 1 (the horizontal line through the box).",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Infer</span>"
    ]
  },
  {
    "objectID": "inferences.html#t-test",
    "href": "inferences.html#t-test",
    "title": "7¬† Infer",
    "section": "8.2 t-test",
    "text": "8.2 t-test\nThe first line of code uses the base R command to run a t-test. It tells R to do the test on the data_scalescomputed data frame, asking whether scale1_index varies by (~) condition. var. sets the assumption of variance and conf.level sets the desired alpha of the test. That command is wrapped in the handy t_apa function, which makes the output much easier to read (and pull directly into a write-up!), and also allows us to get a confidence interval on the effect size (es_ci).\nFor reporting, you‚Äôd probably also want to know the means and standard deviations by condition. The next bit of code asks R to do this, using the summarise function, separately for each condition. Reminder to use na.rm here to account for any missing values.\nThe gt() command shows the requested dataframe in a nice formatting.\n\nt_apa(t.test(data = data_scalescomputed, scale1_index ~ condition12, var. = TRUE, conf.level = .95), es_ci = TRUE)\n\n\nscale1_by_condition12 &lt;- data_scalescomputed %&gt;%\n  group_by(condition12) %&gt;%\n  summarise(mean_scale1 = mean(scale1_index, na.rm = TRUE),\n            sd_scale1 = sd(scale1_index, na.rm = TRUE))\n\n\ngt(scale1_by_condition12)",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Infer</span>"
    ]
  },
  {
    "objectID": "maintain.html",
    "href": "maintain.html",
    "title": "8¬† Maintainer‚Äôs Guide",
    "section": "",
    "text": "8.0.1 Getting access\nFirst, let‚Äôs make sure you have collaborator access to the repository.\n\nHead over to your repository settings\nIf you see unsw-edu-au and the repo name: unsw-edu-au/r4psych in the list then you have collaborator access to the repository.\n\n\nIf you don‚Äôt, let‚Äôs go through how you can request an invite to be a collaborator\n\n8.0.1.1 Request access\nCreate an issue requesting for collaborator access and one of the maintainers with admin rights will send through an invite.\n\n\n\n8.0.2 The set up\nThe set up for maintainer‚Äôs is the same for contributors. Check out the following sections to get started:\n\nInstall Quarto\nGitHub Workflow\n\n\n\n8.0.3 The Maintainer‚Äôs workflow\nThe maintainer‚Äôs workflow goes like this:\n\nYou clone the remote repo\nYou create a new feature branch.\nYou work on your branch and make your edits, you commit regularly, you push regularly to the remote.\nWhen you are happy with your changes, you will create a pull request for your contribution and one of the other maintainers will review it. Edits may be requested or one of the maintainers will make the changes after having a conversation with you.\nOnce everything and everyone is happy and dandy with the final changes, your changes will be approved and merged into main. When this happens, your branch is deleted on the remote and you will also delete it locally.\n\nThis workflow treats branches as temporary entities and will keeps the remote tidy and streamlined.\nNow let‚Äôs walk through this workflow step by step.\n\n\n\n\n\n\nNote\n\n\n\nThe next sections assumes you‚Äôve completed the initial set-up of installing git and a git client. We will focus on using Github Desktop, but the main git commands should translate to whichever client you are using.\n\n\n\n\n8.0.4 Clone: Create a local copy of the book\nNow that we have all the installation/setup out of the way, we can get started!\nLets get you a local copy of the book onto your computer by ‚Äúcloning‚Äù the repository\nHead over to the remote repo for the book:\n\nClick on the big green button that says Code\n\n\nHere you will find a drop-down menu showing different methods of cloning the code from the remote repo.\nWe will stick with the default option of using HTTPS a.k.a. cloning by using the URL of the remote repo.\n\nClick on the copy URL button (The stacked squares icon)\nNavigate to Github Desktop and click on the first drop down menu from the left. Here you will find the Add button.\n\n\n\nClick on Add and then Clone Repository\nClick on the URL option and paste in the URL of this book‚Äôs remote repo e.g.¬†https://github.com/unsw-edu-au/r4psych\nUnder Local Path, you can choose where you want to place this cloned repo. Avoid putting your repos in Cloud services such as Dropbox or Google Drive. These can sometimes interfere with git‚Äôs ability to track your changes.\nFinally, click Clone and let git do the work! It will copy everything that is in the remote repo and bring it down locally on your computer!\nNavigate to the local path where you told git to clone to in Step 7 and check out the directories. You will learn more about these in Book Structure\n\n\n\n8.0.5 Branches: Create your own working copy\nAs maintainers, we will work on branches which are internal copies of the book. This is so we overwrite each other‚Äôs work. This approach will also allow us to have a systematic way in introducing new content to the book. Coordinating collaborative changes on the same project is what GitHub does best.\nThe main branch is currently the most recent approved version of the book - this is displayed at https://unsw-edu-au.github.io/r4psych/\nWhen you clone a repository, the main branch is selected by default.\nTo create your own branch:\n\nClick on the middle menu that says ‚ÄúCurrent branch main‚Äù\nClick on ‚ÄúNew Branch‚Äù\n\n\n\nGive your branch a name.\n\nKeep it concise and related to the feature you are going to work on e.g restructure-wrangle. Separate words with a hyphen.\nAt the end of your branch name, put down your initials, that way other maintainers know who is working on which branch. e.g restructure-wrangle-fk\n\nClick on ‚ÄúCreate Branch‚Äù and voila! Git will automatically switch from main to your branch for you.\n\nAt this stage, your branch exists locally on your computer, no where else.\n\nNext, we will click on ‚ÄúPublish branch‚Äù, this will make your branch available on the remote repo so we can formally incorporate its changes to the main once your edits are done. Publishing your branch also allows other maintainer‚Äôs see your progress.\n\n\n\n8.0.6 Make your changes\nNow that you have our own internal copy of the book, you can freely make changes pertaining to the feature you want to work on.\nNavigate to the local repo and click on the r4pysch.Rproj file. This will open up the project in RStudio.\nYou can also use the buttons in Github Desktop to quickly navigate to the project files.\n\n\n8.0.6.1 Commit: A save point for your work\nNow let‚Äôs make a change to a chapter.\n\nAs a proof of concept, let‚Äôs add a comment in the Wrangle chapter.\n\n\n\nSave this change and have a look at Github Desktop. Notice how git has detected your change? Additions are flagged in green, any deletions are flagged in red. Cool right?!\n\nNow we are going to commit these changes. Think of committing your work as saving your progress in a video. A commit is a safe anchor point to come back to if you need.\n\nBy default, git will tick the check box for you. This check box process is technically called ‚Äústaging‚Äù. Its choosing the files you want git to track.\nNow include a meaningful, concise message that will be associated with your commit. These are usually summaries that pertains to the changes you‚Äôve made. In this case, ‚ÄúAdded comment to Wrangle chapter‚Äù will suffice.\nClick on the blue button Commit to restructure-wrangle and git will save your changes as a checkpoint.\n\nThere is not hard and fast rule with how often you should commit your work. Typically they are bite-sized amounts of work towards the feature you are working on. Thinking about commits as potential check points in time you want to come back to e.g.¬†just after some restructuring/rewording of a big section.\n\n\n8.0.6.2 Push: Sync your work with remote\nUp until this point, all your changes exist locally on your computer. No one else has these changes. Our last step to complete our git/Github workflow is to push our work to the remote repo so other it is available for others to review.\nTo push your work:\n\nClick on the blue button that says ‚ÄúPush origin‚Äù\n\nThis is sync your local changes with those on the remote. Once you‚Äôve done that, you can view your synced changes on the remote repo by selecting your feature branch name under the left dropdown menu\n\n\nAlternatively, you can click on the third tab menu also labelled as ‚ÄúPush origin‚Äù that has an up arrow ‚¨ÜÔ∏è\n\nContinue committing and pushing your work as you make your edits on your feature branch. Its generally good practice to push your work before you step away from working on the book. This is to ensure all your work is synced and shared on the remote.\n\n\n\n8.0.7 Pull Request: Submit your feature for review\nOnce you are happy with your edits on your feature branch and we will prepare a pull request so we can merge them into the main branch.\n\nWe will refer to pull requests as PR from now on\n\nThink of a pull request like code peer review. The idea is have another maintainer go over your edits and provide any constructive feedback/edits. This process ensures that the contributions are vetted by the maintainers and merged in to the main branch systematically.\nThere are two ways to create a pull request:\n\n8.0.7.1 A. Open PR within GitHub Desktop\n\nAfter pushing your changes, Github Desktop will automatically prompt you to ‚ÄúPreview Pull Request‚Äù. Clicking on this blue button will open a window showing you some key details\n\n\n\nAt the top, it will tell you what which base branch you are merging into. By default it will be set to main. In the screenshot above, we can see that we are proposing to merge restructure-wrangle into base: main\nYou will see a preview of the changes you‚Äôve made to the book. Green are additions, red are deletions.\nAt the bottom, it will say whether your edits can be easily merged it or whether there are conflicts. We will talk about how to handle conflicts next.\n\nOnce you are happy with your preview, click on the blue botton to ‚ÄúCreate Pull Request‚Äù\n\nClicking this button will open a browser to the Github website.\n\n Here you see the same sort of information from the preview. You are prompted to write a short title and short summary for your PR. These will form the basis of your commit message when it‚Äôs approved.\n\nKeep your summary concise, use bullet points or hyperlinks if you find them helpful. You can refer to a Github Issue number using a # suffix. (More of this later).\nRequest one of the maintainers using the Reviewer dropdown menu to they can review your PR.\nOnce you are happy, click the green button ‚ÄúCreate Pull Request‚Äù\n\n\n\n8.0.7.2 B: Open PR from Github Website\nYou can also directly open a PR via the Github website by clicking on the ‚ÄúPull Request tab‚Äù.\n\nClick on the green button labelled ‚ÄúNew Pull Request‚Äù\nSelect the branch you want merge into main. Github will display a preview of your PR here.\nClick on the green button ‚ÄúCreate Pull Request‚Äù where you will be taken to the same screen as step 2. from the previous section.\n\n\n\n8.0.7.3 If suggestions are requested\nYou will be prompted via email if there are comments or suggestions made to our PR. The conversations are documented via the PR tab on the Github website. Your feature branch is still active, you can continue making changes and commits to your feature and once they are pushed. They are show up in the PR you have created.\nTA-DA!!! üéâ You‚Äôre done!!! That is the entire git/Github workflow. Now leave this with the maintainer you‚Äôve tagged, they may request have some suggestions for you before the official approval but the hardest part is over!\nBefore you launch into making edits to the book, let‚Äôs talk about how R packages are managed for this book. This is important since this is a book about using R and you will most definitely introduce packages in certain chapters. Its also important as the book gains more maintainers working across different computers.\n\n\n\n8.0.8 {renv}: Managing R packages\nWe use renv to manage the R packages that are used by the book across different R versions and operating systems. renv uses a package cache. That means you only ever have to download and install a package once, and for each subsequent install!\nLearn more from the renv website\nBriefly, renv monitors and installs any R packages that are used in a project. renv records this information so that anyone opening up this book will have access to the same R package versions:\nrenv stores information in several places:\n\nrenv/library/ directory\n\nHere you can see R packages for the different versions of R that was used during the creation of this book.\n\nrenv.lock\n\nThis is a lockfile and contains information about the R packages so that it can be re-installed on a new computer. The great thing about a lockfile is that you can share this which colleagues and they can use renv to reproduce the exact R package environment that was recorded.\n\n.Rprofile This is a project profile and it is run automatically every time you start R. renv uses it to configure your R session to use the project library in renv/library/.\n\n\n8.0.8.1 {renv} workflow\nWe are going to learn some new renv lingo so help us manage our R package environment.\n\n8.0.8.1.1 When you open up the project\nEach time you open this book project up run:\n\n\n- The library is already synchronized with the lockfile.\n\n\nThis will prompt renv to check and install any R packages that you may not have locally. If you have all the packages installed already, renv will tell you you‚Äôre synchronised.\n\n\n8.0.8.1.2 When you want to add R packages\nOver time, our book will need more packages. You can continue to use familiar tools like install.packages(). You can also use renv::install() it‚Äôs a little less typing and can install packages from GitHub, Bioconductor, and more, not just CRAN. Ta-da!\n\n\nThe following package(s) will be installed:\n- janitor [2.2.0]\nThese packages will be installed into \"~/work/r4psych/r4psych/renv/library/R-4.4/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing janitor ...                        OK [linked from cache]\nSuccessfully installed 1 package in 5.5 milliseconds.\n\n\nAfter installing the package and checking that your code works, you should call renv::snapshot() to record the latest package versions in your lockfile. You‚Äôll need to commit those changes to git and let your collaborators know that you‚Äôve updated the lockfile and they should call renv::restore() when they‚Äôre next working on a project.\n\n\n\n\n\n\nNote\n\n\n\nThis is why its good practice to call renv::restore() each time you open the project üòÅ\n\n\n\n\n\n\n8.0.9 Book Structure",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Maintainer's Guide</span>"
    ]
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "9¬† Contributing Guidelines",
    "section": "",
    "text": "This resource is created in mind so that the community that uses it, can also contribute to it. We hope this mindset will encourage the resource to grow and stay up-to-date for R learners.\nImportantly, all skill levels are welcome to contribute, even if you think your skills are not up to scratch - this is what this guide is for! There is also a way for you to contribute if code/git/Quarto is not your cup of tea.\n\n9.0.1 Hello Quarto!\nThis book is built by Quarto which is an open source, cross-language publishing system that allows users to build beautiful things from blogs, to websites and books!\nYou can learn more about the capabilities of Quarto in this talk by Mine √áetinkaya-Rundel & Julia Stewart Lowndes at posit::conf(2023)\n\n9.0.1.1 Install Quarto\nFirst things first, let‚Äôs make sure we have the latest version of Quarto installed using these instructions\n\n\n\n9.0.2 GitHub Workflow\nNext, we need to talk about the Git/GitHub part of the workflow. Git is a version control system. It that tracks changes in our code that generated this book and helps us coordinate our collaborative edits.\nGit monitors the changes in a project directory a.k.a repository or ‚Äúrepo‚Äù. There are two types of repositories:\n\nLocal repository: This is a project directory that exists locally in your computer than git is actively watching over.\nRemote repository: This is a synced copy of your local repo. The remote repo for this book lives on GitHub. GitHub centralises our collaborative efforts. It provides a platform for the community to make a local copy of the book, create changes and introduce them back to the remote repository. GitHub also acts as the hosting service for the book itself which is also a big bonus for us.\n\n\n\n\n\n\n\nTip\n\n\n\nA great resource on GitHub setup and collaboration is Happy Git with R, which includes fantastic background philosophy as well as tips for set-up, workflows, and collaboration.\n\n\n\n9.0.2.1 Sign up to GitHub\nStart by getting yourself an account at GitHub by signing up here\n\n\n9.0.2.2 Install git\nFollow these instructions from ‚ÄúHappy Git with R‚Äù to install git to your computer. There are specific instructions for different operating systems.\n\n\n9.0.2.3 Install a git client\nTraditionally, git has been used in the shell terminal. This is the ‚Äòback-end‚Äô of the computer and allows you to interact with your computer using code. This means that you have to type out commands to tell git what to do. This approach can become a little overwhelming when you are starting out.\nInstead, we suggest using a git client like Github Desktop, however it is limited to only to Windows and Mac. If you use Linux, GitKraken is also a great alternative. There are many git clients to choose from. Once you start to get the hang on things, all of these clients are much of the same and its a matter of personal preference.\nIf you are an RStudio user, there is a built-in git tab to the interface, its features are more simplified than the previously mentioned clients but does the basic commands that we will talk about next.\nOnce you have downloaded a client, follow it‚Äôs instructions to login and connect your Github account to the client.\n\n\n\n\n\n\nNote\n\n\n\nFor the rest of the chapter, we will focus on using Github Desktop, but the main git commands should translate to whichever client you are using.\n\n\n\n\n\n9.0.3 The Contributor‚Äôs workflow\nWe will work on forks (independent copies of the book) so as to not overwrite each other‚Äôs work and have a systematic way in introducing new contributions to the book. Coordinating collaborative changes on the same project is what GitHub does best.\nThe main branch is currently the most recent approved version of the book - this is displayed at https://unsw-edu-au.github.io/r4psych/\nThe contributing workflow looks like this:\n\nYou fork the most recent version from main\nYou make your edits, you commit regularly, you push regularly to the remote (github.com)\nWhen you are happy with your changes, you will create a pull request for your contribution and one of the core maintainers will review it. Edits may be requested or one of the maintainers will make the changes after having a conversation with you.\nOnce everything and everyone is happy and dandy with the final changes, your changes will be approved and merged into main. When this happens, your branch is deleted on the remote and you will also delete it locally.\n\nNow let‚Äôs walk through this workflow step by step\n\n\n\n\n\n\nNote\n\n\n\nThe following sections assumes you‚Äôve completed the initial set-up of installing git and a git client\n\n\n\n9.0.3.1 Fork: Create an independent copy of the book\nNow that we have all the installation out of the way, we can get started!\nThe best way to contribute to the book is to create an independent copy that lives in your Github account. This process is called creating a fork and it allows you to make your contributions without it affecting the approved version of the book.\n\nTo create a fork, head over to the remote repo for the book and click on the Fork button on the right hand side of the webpage\n\n\n\nContinue to the next webpage and leave the default settings as they are and click the green button Create fork\n\n\nForking will create a duplicate of the r4psych book remote repo into your account. This is your remote copy that you can make your contributions to. We will talk about how we bring your contributions back to the r4psych remote repo later in Create a pull request.\n\n\n9.0.3.2 Clone: Create a local copy of your fork\nOnce you have a fork, we will get a local copy of the book onto your computer by ‚Äúcloning‚Äù the forked repository.\n\nHead to the webpage of your forked repository. The URL for it should look something like: https://github.com/your-usename/r4psych\nClick on the big green button that says Code\n\n\nHere you will find a drop-down menu showing different methods of cloning the code from the remote repo.\nWe will stick with the default option of using HTTPS a.k.a. cloning by using the URL of the remote repo.\n\nClick on the copy URL button (The stacked squares icon)\nNavigate to Github Desktop and click on the first drop down menu from the left. Here you will find the Add button.\n\n\n\nClick on Add and then Clone Repository\nClick on the URL option and paste in the URL of your fork‚Äôs remote repo e.g.¬†https://github.com/your-username/r4psych\nUnder Local Path, you can choose where you want to place this cloned repo. Avoid putting your repos in Cloud services such as Dropbox or Google Drive. These can sometimes interfere with git‚Äôs ability to track your changes.\nFinally, click Clone and let git do the work! It will copy everything that is in the remote repo and bring it down locally on your computer!\nNavigate to the local path where you told git to clone to in Step 7 and check out the directories. You will learn more about these in Book Structure\n\n\n\n9.0.3.3 Make your changes\n\n\n9.0.3.4 Push your work to remote\n\n\n9.0.3.5 Create a pull request\n\n\n\n9.0.4 {renv}: Managing R packages\n\n9.0.4.1 {renv} workflow\n\n\n\n9.0.5 Book Structure\n\n9.0.5.1 Book Practices and Conventions\n\n\n\n9.0.6 Can I make a contribution without using Git?",
    "crumbs": [
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Contributing Guidelines</span>"
    ]
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "11¬† Appendix",
    "section": "",
    "text": "12 how to install R and RStudio on your machine\nThe marvellous Danielle Navarro has LOTS of useful R learning resources on her YouTube channel. This playlist about how to install R and RStudio is particularly useful; no matter which operating system you are dealing with‚Ä¶ Dani has you covered.",
    "crumbs": [
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "appendix.html#option-1",
    "href": "appendix.html#option-1",
    "title": "11¬† Appendix",
    "section": "13.1 option 1",
    "text": "13.1 option 1\nInstall a package by typing the following command with the name of the package you would like to install in the console.\ninstall.packages(\"packagename\")",
    "crumbs": [
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "appendix.html#option-2",
    "href": "appendix.html#option-2",
    "title": "11¬† Appendix",
    "section": "13.2 option 2",
    "text": "13.2 option 2\nAlternatively, search for the package you would like to install in the packages tab.\n\n\n\nYou can search for packages and install them from CRAN via the packages tab\n\n\n\nRemember once you have installed a package, you will need to use the library() function to load it before it will work.",
    "crumbs": [
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  },
  {
    "objectID": "appendix.html#useful-packages-for-psychology",
    "href": "appendix.html#useful-packages-for-psychology",
    "title": "11¬† Appendix",
    "section": "13.3 useful packages for psychology",
    "text": "13.3 useful packages for psychology\n\ntidyverse this is a cluster of super helpful data wrangling and visualisation tools.\nhere this package helps direct R to the correct place for files based on the current working directory.\njanitor this package helps us clean up data - especially awkward variable names.\nqualtRics this package is helpful in reading in data files from Qualtrics‚Ä¶ except for .sav SPSS format files! (see next)\nhaven this package is a good one for reading in .sav SPSS format files\nsjplot this package is helpful for making a ‚Äòcodebook‚Äô of your variables and values from imported .sav files\nsurveytoolbox this package is helpful in drawing out the value labels of variables imported in .sav format ‚Äì note: because surveytoolbox is on github and not CRAN, you‚Äôll want to do the following two steps in the console. Note that we do this in the console since we only need to do it once! If the install asks you about updating packages, go ahead and do it! ‚Äî(1) install the devtools package: install.packages(‚Äúdevtools‚Äù) ‚Äî(2) install via github: devtools::install_github(‚Äúmartinctc/surveytoolbox‚Äù)\nufs this package (short for user friendly science) is a nice tool for computing the internal reliability of scales ‚Äì note: one of the commands we will use in ufs requires the psych package to be installed (but doesn‚Äôt need to be loaded via library()). Ensure you install that first. Two steps: ‚Äî-(1) install the `remotes`` package: install.packages(‚Äúremotes‚Äù) ‚Äî-(2) install via github_lab: remotes::install_gitlab(‚Äòr-packages/ufs‚Äô)\napa nice for making statistical output into APA style\ngt nice for making your tables look pretty\napaTables makes nice APA-styled tables of correlation, ANOVA, regression etc. output\nreport is a package to help with results reporting\npsych is an umbrella package for lots of common psych tasks\nez is a great package for stats, including analysis of variance\nemmeans is helpful for comparing specific means in a factorial design",
    "crumbs": [
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Appendix</span>"
    ]
  }
]